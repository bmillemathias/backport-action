#!/usr/bin/env python3

import base64
import json
import os
import re
import sys
import traceback
from subprocess import PIPE, CalledProcessError, check_call, check_output

import requests

event = None
auth_header = "Bearer {}".format(os.environ["INPUT_TOKEN"])


def fail(message):
    response = requests.post(
        event["pull_request"]["_links"]["comments"]["href"],
        json={"body": message},
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": auth_header,
            "Content-Type": "application/json",
        },
    )
    if not response.ok:
        print(response.text)


def backport(number, branch):
    print("::debug::Backporting pull request #{} to branch {}".format(number, branch))

    repository = event["repository"]["clone_url"]
    backport_branch = "backport/{}-to-{}".format(number, branch)

    refs = event["repository"]["url"]
    response = requests.get(
        "{}/git/ref/heads/{}".format(refs, backport_branch),
        headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if response.ok:
        print("The branch {} already exists.".format(backport_branch))
        return

    if response.status_code != 404:
        print(response.text)
        fail("Error getting the branch {}:\n{}".format(ref, response.text))
        sys.exit(1)

    merge_commit_sha = event["pull_request"]["merge_commit_sha"]

    response = requests.get(
        event["repository"]["git_commits_url"].format(**{"/sha": "/" + merge_commit_sha}),
        headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if not response.ok:
        print(response.text)
        raise Exception(response.text)
    if len(response.json()["parents"]) == 1:
        commits_sha = [merge_commit_sha]
    else:
        response = requests.get(
            event["pull_request"]["_links"]["commits"]["href"],
            headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
        )
        if not response.ok:
            print(response.text)
            raise Exception(response.text)
        commits_sha = [c["sha"] for c in response.json()]

    auth = "http.extraheader=Authorization: basic {}".format(
        base64.b64encode(("x-access-token:" + os.environ["INPUT_TOKEN"]).encode()).decode()
    )

    workspace = os.environ["GITHUB_WORKSPACE"]
    if not os.path.exists(workspace) or not os.listdir(workspace):
        check_call(["git", "clone", "-c", auth, repository, workspace])
    check_call(["git", "checkout", branch], cwd=workspace)
    check_call(["git", "checkout", "-b", backport_branch], cwd=workspace)
    failed = False
    commands = []
    error = None
    for commit_sha in commits_sha:
        if failed:
            commands.append("git cherry-pick " + commit_sha)
        else:
            try:
                check_call(
                    [
                        "git",
                        "config",
                        "--global",
                        "user.email",
                        check_output(
                            ["git", "--no-pager", "log", "--format=format:%ae", "-n", "1", commit_sha],
                            cwd=workspace,
                        ),
                    ],
                    cwd=workspace,
                )
                check_call(
                    [
                        "git",
                        "config",
                        "--global",
                        "user.name",
                        check_output(
                            ["git", "--no-pager", "log", "--format=format:%an", "-n", "1", commit_sha],
                            cwd=workspace,
                        ),
                    ],
                    cwd=workspace,
                )
                check_output(["git", "cherry-pick", commit_sha], cwd=workspace, stderr=PIPE)
            except CalledProcessError as e:
                failed = True
                error = "Error on backporting to branch {}, error on cherry picking {}:\n{}\n{}".format(
                    branch, commits_sha, e.stderr.decode(), e.stdout.decode()
                )
                commands.append("git fetch")
                commands.append("git checkout " + backport_branch)
                commands.append("git reset --hard HEAD^")
                commands.append("git cherry-pick " + commit_sha)
                check_call(["git", "reset", "--hard",], cwd=workspace)
    if failed:
        commands.append("git push origin {} --force".format(backport_branch))
        with open("BACKPORT_TODO", "w") as f:
            f.write("{}\n\nto continue do:\n{}\n".format(error, "\n".join(commands)))
        check_call(
            ["git", "add", "BACKPORT_TODO"], cwd=workspace,
        )
        check_call(
            ["git", "commit", "--message=[skip ci] Add instructions to finish the backport"], cwd=workspace,
        )
    check_call(
        ["git", "-c", auth, "push", "--set-upstream", "origin", backport_branch], cwd=workspace,
    )

    title = event["pull_request"]["title"]
    pull_request_title = "[Backport {}] {}".format(branch, title)
    pull_request_body = "Backport of #{}".format(number)
    if failed:
        pull_request_body += "\n\nError on cherry picking:\n{}\n\nTo continue do:\n{}".format(
            error, "\n".join(commands)
        )
    pull_request = {
        "title": pull_request_title,
        "body": pull_request_body,
        "head": backport_branch,
        "base": branch,
        "maintainer_can_modify": True,
    }

    response = requests.post(
        event["repository"]["url"] + "/pulls",
        json=pull_request,
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": auth_header,
            "Content-Type": "application/json",
        },
    )
    if not response.ok:
        print(response.text)


def delete(ref):
    refs = event["repository"]["url"]

    response = requests.get(
        "{}/git/ref/heads/{}".format(refs, ref),
        headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if response.status_code == 404:
        print("Branch {} does not exists anymore".format(ref))
        return
    if not response.ok:
        print(response.text)
        fail("Error getting the branch {}:\n{}".format(ref, response.text))
        sys.exit(1)

    response = requests.delete(
        "{}/git/refs/heads/{}".format(refs, ref),
        headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if not response.ok:
        print(response.text)
        fail("Fail to delete {}:\n{}".format(ref, response.text))
        sys.exit(1)


def main():
    global event
    with open(os.environ["GITHUB_EVENT_PATH"], encoding="utf-8") as event_file:
        event = json.loads(event_file.read())
    print("Event")
    print(event)
    print()
    number = event["number"]
    state = event["pull_request"]["state"]
    login = event["pull_request"]["user"]["login"]
    merged = event["pull_request"]["merged"]
    labels = [l["name"] for l in event["pull_request"]["labels"]]

    if state == "closed" and login == "github-actions[bot]":
        print("Delete branch")
        delete(event["pull_request"]["head"]["ref"])

    if not merged:
        print("Pull request not merged")
        sys.exit(0)

    label_re = re.compile(r"backport (.+)")
    for label in labels:
        try:
            # label needs to be `backport <name of the branch>`
            label_match = label_re.match(label)
            if label_match is not None:
                print("Backport to branch " + label)
                backport(number, label_match.group(1))
        except Exception:
            traceback.print_exception(*sys.exc_info())
            fail(
                "Error on backporting to branch {}, see Docker Hub actions for more information.".format(
                    label_match.group(1)
                )
            )


main()

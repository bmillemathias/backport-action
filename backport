#!/usr/bin/env python3

import base64
import json
import os
import re
import sys
import traceback
from subprocess import PIPE, CalledProcessError, check_call, check_output

import requests

event = None
auth_header = "Bearer {}".format(os.environ["INPUT_TOKEN"])


def fail(message):
    responce = requests.post(
        event["pull_request"]["_links"]["comments"]["href"],
        json={"body": message},
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": auth_header,
            "Content-Type": "application/json",
        },
    )
    if not responce.ok:
        print(responce.text)


def backport(number, branch):
    print("::debug::Backporting pull request #{} to branch {}".format(number, branch))

    repository = event["repository"]["clone_url"]
    backport_branch = "backport/{}-to-{}".format(number, branch)

    responce = requests.get(
        event["pull_request"]["_links"]["commits"]["href"],
        headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if not responce.ok:
        print(responce.text)
        raise Exception(responce.text)
    commits_sha = [c["sha"] for c in responce.json()]

    auth = "http.extraheader=Authorization: basic {}".format(
        base64.b64encode(("x-access-token:" + os.environ["INPUT_TOKEN"]).encode()).decode()
    )

    check_call(["git", "clone", "-c", auth, repository, os.environ["GITHUB_WORKSPACE"]])
    check_call(["git", "checkout", branch], cwd=os.environ["GITHUB_WORKSPACE"])
    check_call(["git", "checkout", "-b", backport_branch], cwd=os.environ["GITHUB_WORKSPACE"])
    for commit_sha in commits_sha:
        try:
            check_call(
                [
                    "git",
                    "config",
                    "--global",
                    "user.email",
                    check_output(["git", "--no-pager", "log", "--format=format:%ae", "-n", "1", commit_sha]),
                ]
            )
            check_call(
                [
                    "git",
                    "config",
                    "--global",
                    "user.name",
                    check_output(["git", "--no-pager", "log", "--format=format:%an", "-n", "1", commit_sha]),
                ]
            )
            check_output(["git", "cherry-pick", commit_sha], cwd=os.environ["GITHUB_WORKSPACE"], stderr=PIPE)
        except CalledProcessError as e:
            fail(
                "Error on backporting to branch {}, error on cherry picking {}:\n{}\n{}".format(
                    branch, commits_sha, e.stderr, e.stdout
                )
            )
            return
    check_call(
        ["git", "-c", auth, "push", "--set-upstream", "origin", backport_branch],
        cwd=os.environ["GITHUB_WORKSPACE"],
    )

    title = event["pull_request"]["title"]
    pull_request_title = "[Backport {}] {}".format(branch, title)
    pull_request_body = "Backport of #{}".format(number)
    pull_request = {
        "title": pull_request_title,
        "body": pull_request_body,
        "head": backport_branch,
        "base": branch,
    }

    requests.post(
        event["repository"]["url"] + "/pulls",
        json=pull_request,
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": auth_header,
            "Content-Type": "application/json",
        },
    )
    if not responce.ok:
        print(responce.text)
        raise Exception(responce.text)


def delete(ref):
    refs = event["pull_request"]["head"]["repo"]["git_refs_url"]

    responce = requests.delete(
        "{}/{}".format(refs, ref),
        event["repository"]["pulls_url"],
        headers={"Accept": "application/vnd.github.v3+json", "Authorization": auth_header},
    )
    if not responce.ok:
        print(responce.text)
        fail("Fail to delete {}:\n{}".format(ref, responce.text))
        sys.exit(1)


def main():
    global event
    with open(os.environ["GITHUB_EVENT_PATH"]) as event_file:
        event = json.loads(event_file.read())
    print("event")
    print(event)
    print()
    number = event["number"]
    state = event["pull_request"]["state"]
    login = event["pull_request"]["user"]["login"]
    merged = event["pull_request"]["merged"]
    labels = [l["name"] for l in event["pull_request"]["labels"]]

    if state == "closed" and login == "github-actions[bot]":
        delete(event["pull_request"]["head"]["ref"])
        sys.exit(0)

    if not merged:
        sys.exit(0)

    label_re = re.compile(r"backport (.*)")
    for label in labels:
        try:
            # label needs to be `backport <name of the branch>`
            label_match = label_re.match(label)
            if label_match is not None:
                backport(number, label_match.group(1))
        except Exception:
            print("".join(traceback.format_exception(*sys.exc_info())))
            fail(
                "Error on backporting to branch {}, see Docker Hub actions for mor information.".format(
                    label_match.group(1)
                )
            )


main()
